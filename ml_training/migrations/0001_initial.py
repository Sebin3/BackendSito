# Generated by Django 4.2.7 on 2025-10-25 16:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import ml_training.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('datasets', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del modelo', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descripción del modelo', null=True)),
                ('algorithm', models.CharField(choices=[('random_forest', 'Random Forest'), ('neural_network', 'Neural Network (PyTorch)'), ('gradient_boosting', 'Gradient Boosting (XGBoost)')], help_text='Algoritmo de ML utilizado', max_length=20)),
                ('task_type', models.CharField(choices=[('classification', 'Clasificación'), ('regression', 'Regresión')], help_text='Tipo de tarea (clasificación o regresión)', max_length=15)),
                ('target_column', models.CharField(help_text='Columna objetivo (target) para predecir', max_length=100)),
                ('feature_columns', models.JSONField(help_text='Columnas utilizadas como features')),
                ('hyperparameters', models.JSONField(blank=True, help_text='Hiperparámetros del modelo', null=True)),
                ('model_file', models.FileField(blank=True, help_text='Archivo del modelo entrenado', null=True, upload_to=ml_training.models.model_file_path)),
                ('training_metrics', models.JSONField(blank=True, help_text='Métricas del conjunto de entrenamiento', null=True)),
                ('validation_metrics', models.JSONField(blank=True, help_text='Métricas del conjunto de validación', null=True)),
                ('test_metrics', models.JSONField(blank=True, help_text='Métricas del conjunto de prueba', null=True)),
                ('training_time', models.FloatField(blank=True, help_text='Tiempo de entrenamiento en segundos', null=True)),
                ('training_samples', models.IntegerField(blank=True, help_text='Número de muestras de entrenamiento', null=True)),
                ('validation_samples', models.IntegerField(blank=True, help_text='Número de muestras de validación', null=True)),
                ('test_samples', models.IntegerField(blank=True, help_text='Número de muestras de prueba', null=True)),
                ('feature_importance', models.JSONField(blank=True, help_text='Importancia de las características', null=True)),
                ('status', models.CharField(choices=[('training', 'Entrenando'), ('completed', 'Completado'), ('failed', 'Fallido')], default='training', help_text='Estado del entrenamiento', max_length=10)),
                ('error_message', models.TextField(blank=True, help_text='Mensaje de error si el entrenamiento falló', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Fecha y hora de finalización del entrenamiento', null=True)),
                ('cleaned_dataset', models.ForeignKey(blank=True, help_text='Dataset limpio utilizado', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ml_models_cleaned', to='datasets.cleaneddataset')),
                ('original_dataset', models.ForeignKey(blank=True, help_text='Dataset original utilizado', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ml_models_original', to='datasets.dataset')),
                ('owner', models.ForeignKey(help_text='Usuario propietario del modelo', on_delete=django.db.models.deletion.CASCADE, related_name='ml_models', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Modelo ML',
                'verbose_name_plural': 'Modelos ML',
                'db_table': 'ml_models',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_data', models.JSONField(help_text='Datos de entrada para la predicción')),
                ('prediction_result', models.JSONField(help_text='Resultado de la predicción')),
                ('confidence_score', models.FloatField(blank=True, help_text='Puntuación de confianza de la predicción', null=True)),
                ('prediction_time', models.FloatField(blank=True, help_text='Tiempo de predicción en segundos', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ml_model', models.ForeignKey(help_text='Modelo utilizado para la predicción', on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='ml_training.mlmodel')),
            ],
            options={
                'verbose_name': 'Predicción',
                'verbose_name_plural': 'Predicciones',
                'db_table': 'ml_predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ModelComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre de la comparación', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Descripción de la comparación', null=True)),
                ('comparison_results', models.JSONField(blank=True, help_text='Resultados detallados de la comparación', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('best_accuracy_model', models.ForeignKey(blank=True, help_text='Modelo con mejor accuracy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_accuracy_comparisons', to='ml_training.mlmodel')),
                ('best_f1_model', models.ForeignKey(blank=True, help_text='Modelo con mejor F1-score', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_f1_comparisons', to='ml_training.mlmodel')),
                ('best_overall_model', models.ForeignKey(blank=True, help_text='Mejor modelo general', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_overall_comparisons', to='ml_training.mlmodel')),
                ('models_to_compare', models.ManyToManyField(help_text='Modelos incluidos en la comparación', related_name='comparisons', to='ml_training.mlmodel')),
                ('owner', models.ForeignKey(help_text='Usuario propietario de la comparación', on_delete=django.db.models.deletion.CASCADE, related_name='model_comparisons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comparación de Modelos',
                'verbose_name_plural': 'Comparaciones de Modelos',
                'db_table': 'ml_model_comparisons',
                'ordering': ['-created_at'],
            },
        ),
    ]
